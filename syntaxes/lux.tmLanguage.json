{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "lux",
  "scopeName": "source.lux",
  "fileTypes": [
    "lux"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.declaration.lux",
          "match": "\\b(var|extern)\\b"
        },
        {
          "name": "keyword.control.flow.lux",
          "match": "\\b(break|return|continue)\\b"
        },
        {
          "name": "keyword.control.conditional.lux",
          "match": "\\b(if|else)\\b"
        },
        {
          "name": "keyword.control.repeat.lux",
          "match": "\\b(while|for)\\b"
        },
        {
          "name": "keyword.constant.bool.lux",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.constant.none.lux",
          "match": "\\bvoid\\b"
        },
        {
          "name": "keyword.default.lux",
          "match": "\\b(function|and|or|not|in)\\b"
        },
        {
          "name": "variable.other.enummember.zig",
          "match": "@[_$[:alpha:]][_$[:alnum:]]*\\b"
        },
        {
          "name": "entity.name.function.lux",
          "match": "[_$[:alpha:]][_$[:alnum:]]*(?=\\s*(=|:)\\s*\\bfunction\\b)"
        },
        {
          "name": "entity.name.function.call.lux",
          "match": "[_$[:alpha:]][_$[:alnum:]]*(?=\\s*\\()"
        },
        {
          "name": "variable.lux",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.lux",
          "match": "(\\b(and|or|not)\\b)|(==|!=)"
        },
        {
          "name": "keyword.operator.arithmetic.lux",
          "match": "(-|\\+|\\*|/|%)=?"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.lux",
          "begin": "//",
          "end": "$",
          "patterns": [
            {
              "match": "\\b(TODO|NOTE|FIXME|XXX)\\b",
              "name": "keyword.todo.lux"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.lux",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ]
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "name": "constant.character.escape.lux",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.lux",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.lux",
          "match": "\\b[0-9]\\.[0-9]+\\b"
        },
        {
          "name": "constant.numeric.decimal.lux",
          "match": "\\b[0-9]+\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.lux",
          "match": "\\b0x[a-fA-F0-9]+\\b"
        }
      ]
    }
  }
}
